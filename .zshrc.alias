
# ls
alias la="ls -a"
alias lf="ls -F"
alias ll="ls -l"

# process
# alias j="jobs -l"
alias 'ps?'='pgrep -l -f'
alias pk='pkill -f'

# du/df
alias du="du -h"
alias df="df -h"
alias duh="du -h ./ --max-depth=1"

# su
alias su="su -l"

# vim
alias v='vim'
alias 'src'='exec zsh'
alias -g V="| vim -"
alias -g EV="| xargs --verbose sh -c 'vim \"\$@\" < /dev/tty'"

# rails
alias -g RET="RAILS_ENV=test"
alias -g RED="RAILS_ENV=development"
alias -g REP="RAILS_ENV=production"

# rake
alias raket='RAILS_ENV=test rake'
alias raked='RAILS_ENV=development rake'
alias rakep='RAILS_ENV=production rake'

# colorized cat
alias ccat='pygmentize -O style=vim -f console256 -g'

# less
alias less='less -r'

# grep
alias 'gr'='grep --color=auto -ERUIn'

alias -g TEE="2>&1 | tee"

#make
alias 'm'='make'
alias 'mn'='make native-code'
alias 'mc'='make clean'

# screen
alias s='screen -U'
alias sc='screen -S main'
alias sn='screen'
#alias sl='screen -ls'
alias sr='screen -r main'
alias srr='screen -U -D -RR'

# tmux
alias tm='tmux'
alias tma='tmux attach'
alias tma0='tmux attach -t 0'
alias tma1='tmux attach -t 1'
alias tma2='tmux attach -t 2'
alias tml='tmux list-sessions'

alias pon='predict-on'
alias poff='predict-off'
alias p='ping -c 4'

#alias ls='ls -al'
alias cp='nocorrect cp -irp'
alias refe='nocorrect refe'

# git
alias g='git'
alias gi='git'
alias oppai='git'
alias gs='git status -s -b'
alias gst='git status -s -b'
alias gst="git log --date=short --max-count=1 --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' | tail -1 && echo '' && git status -s -b"
alias gc='git commit'
alias gci='git commit -a'
alias '偽ｔ'=git
alias gcd='cd $(ghq root)/$(ghq list | peco)'
alias gh='hub browse $(ghq list | peco | cut -d"/" -f 2,3)'
alias gic='git issue create -m'
alias gapa='echo -e "a\n*\nq\n" | git add -i && git add -p'

# jq
alias -g JQ='jq "."'

function lessjq() {
  cat $1 | jq -C "." | less -R
}

function catjq() {
  cat $1 | jq -C "."
}

alias java='nocorrect java'
alias cp='nocorrect cp -irp'
alias erl='nocorrect erl'
alias sbcl='nocorrect sbcl'
alias gosh='nocorrect gosh'
# alias hg='nocorrect hg --encoding=utf-8'

# scala
alias scala='scala -deprecation -unchecked -explaintypes'
alias scc='scalac -deprecation -unchecked -explaintypes'
alias sci='scala -deprecation -unchecked -explaintypes -cp $SCALA_CLASSPATH -i ~/import.scala'
alias sce='scala'

# use oh-my-zsh/plugins/extract.zsh
#
# extract http://d.hatena.ne.jp/jeneshicc/20110215/1297778049
# extract () {
  # if [ -f $1 ] ; then
      # case $1 in
          # *.tar.bz2)   tar xvjf $1    ;;
          # *.tar.gz)    tar xvzf $1    ;;
          # *.tar.xz)    tar xvJf $1    ;;
          # *.bz2)       bunzip2 $1     ;;
          # *.rar)       unrar x $1     ;;
          # *.gz)        gunzip $1      ;;
          # *.tar)       tar xvf $1     ;;
          # *.tbz2)      tar xvjf $1    ;;
          # *.tgz)       tar xvzf $1    ;;
          # *.zip)       unzip $1       ;;
          # *.Z)         uncompress $1  ;;
          # *.7z)        7z x $1        ;;
          # *.lzma)      lzma -dv $1    ;;
          # *.xz)        xz -dv $1      ;;
          # *)           echo "don't know how to extract '$1'..." ;;
      # esac
  # else
      # echo "'$1' is not a valid file!"
  # fi
# }
alias ex='extract'

alias ev='vi ~/dotfiles/.vimrc*'
alias be='bundle exec'

grepvim() {
    XFS=`grep -ERUInl $* | uniq | xargs`
    if [ "$XFS" ] ; then
      vim `grep -ERUInl $* | uniq | xargs`
    fi
}
alias grv='grepvim'

gem-install() {
    gem install $1 && rbenv rehash
}
function _latest() {
  echo "$1/`ls --format=single-column -t $1 | head -1`"
}
alias latest='_latest'

# ------------------------------------
# Docker alias and function
#   from https://github.com/tcnksm/docker-alias
# ------------------------------------

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

# docker compose function
#

alias dcu="docker-compose up -d"

alias dcr="docker-compose run --rm"

alias dce="docker-compose exec"

alias dcub="docker-compose up -d --build"

alias dcb="docker-compose build"
alias dref="docker-compose up -d && docker-sync stop && docker-sync clean && docker-sync start"

# intellij

idea(){
    nohup /Users/matsumotokouta/Applications/JetBrains\ Toolbox/IntelliJ\ IDEA\ Ultimate.app/Contents/MacOS/jetbrains-toolbox-launcher $(cd "${1}" && /bin/pwd) &
}

## pgen
# io.StdIn.readLine().map(c => (c.toByte+1).toChar)

firefox(){
    nohup /Applications/Firefox.app/Contents/MacOS/firefox -p
}

alias genAllPair="pict <(pbpaste) /d:\"|\" /a:~ | tr '\t' ', ' | pbcopy"

scp-st() { scp $1 s-st:/var/www/vhosts/scouter_api/$1; }

alias sync-domain="rsync -ahv vendor/reno-shelter/scouter_domain/src/* ../scouter_domain/src/ && rsync -ahv database/migrations/* ../scouter_domain/database/migrations/"

alias mems="vm_stat | perl -ne '/page size of (\d+)/ and \$size=\$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf(\"%-16s % 16.2f Mi\n\",  \"\$1:\",  \$2 * \$size / 1048576);'"

alias noti='terminal-notifier -message "コマンド完了"'



alias phpcoverage='./vendor/bin/phpunit --coverage-html storage/logs/clover.html && open storage/logs/clover.html/index.html'

mkfac(){
  php artisan make:factory ${1}Factory --model=Entities\\${1}
}

# highlight
hl(){
  syntax=${1:-js}
  pbpaste | highlight --syntax ${syntax} -O rtf | pbcopy
}
